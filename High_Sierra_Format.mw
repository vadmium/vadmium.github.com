== HSF ==

[[WP:High Sierra Format]]

== ISO 9660 (CDFS) ==

[[WP:ISO 9660]]

Ecma-119.pdf: ''Volume and file structure of CDROM for information interchange''

;sector
:Smallest addressable individual part of CD
;Data Field
:User data in a CD sector; e.g. 2048 bytes on a 2352-byte sector
;Logical Sector
:Highest power of two bytes that fits a CD sector data field; minimum 2048&nbsp;B, spanning multiple CD sectors. Numbered from zero.
;System Area
:16 logical sectors (32&nbsp;KiB) reserved at the start of the volume
;Data Area
:Remaining space from logical sector number 16 onwards

;Logical Block
:512&nbsp;B or higher power of two; at most the “logical sector” size. Numbered from zero.
;Extent
:Any continuous series of logical blocks
;File Section
:Part of file data recorded in an extent. Recorded in “data area”; there may be more than one file section per file.
;File Unit
:Continuous sequence of logical blocks in an extent (extent within an extent). File units have uniform size and spacing for a given file section. Aligned to the start of a logical sector. Any extended attribute record spans entire first file unit.
:;size
::Logical blocks
:
;Interleave Gap
:Extra space after each file unit; uniform size for a given file section
;Extended Attribute Record
:May be associated with a file section. If recorded, at beginning of its extent. Spans whole of first file unit in interleaved mode.
:;length
::Logical blocks
:
;Data Space
:The file units (interleaved mode) or extent (non-interleaved mode) subsequent to any extended attribute record. File data recorded beginning at the start of the data space.
:;data length
::bytes; may be less than available

;byte position
:Numbered from one

;Volume Descriptor
;File Descriptor
;Directory Descriptor
;Path Table
:All recorded in “data area”

;volume data area:
:*volume descriptors
:** root directory
:** path table
:*** all directories
:
;directory: must be in a single extent
:* subdirectories
:* file sections
:** [extended attribute record]

== Non-sequential recording (NSR) ==

[http://www.ecma-international.org/publications/standards/Ecma-167.htm ECMA-167] ''Volume and file structure for write-once and rewritable media using non-sequential recording for information interchange

;byte position
:Numbered from zero (different from CDFS)
;numerical values
:Recorded in little endian, two’s compliment

;sector
:Data field of smallest addressable independent part of medium
:;number
::Initial 0
:
;volume recognition area
:Sector-aligned, beginning after first 32&nbsp;KiB of sectors in “volume recognition space”, presumably to correspond with CDFS’s Data Area.
;volume recognition sequence
:Sequence of Volume Structure Descriptors, recorded from the start of the volume recognition area. Terminated by invalid descriptor.
;Volume Structure Descriptor
:Aligned to the start of a sector and padded to the end of its last sector with zeros
:;Standard Identifier (byte position 1; 5 bytes)
::Indicates interpretation of Volume Structure Descriptor. Values mentioned: BEA01, BOOT2, CD001, CDW02, NSR02, NSR03, TEA01.
:;Structure Type (position 0; 1 byte)
:;Structure Version (position 6; 1 byte)
:;Structure Data (position 7; 2041 bytes)
:
;CD-ROM Volume Descriptor Set
:Optional; at start of volume recognition sequence. Details specified by CDFS.
;Extended Area
:All Volume Structure Descriptors except the CD-ROM Volume Descriptor Set must be within an Extended Area. Bracketed by at least one Beginning Extended Area Descriptor and at least one Terminating Extended Area Descriptor.
;Beginning Extended Area Descriptor
:Standard Identifier “BEA01”; Structure Type 0; Structure Version 1; Structure Data zeroed
;Terminating Extended Area Descriptor
:Standard Identifier “TEA01”; Structure Type 0; Structure Version 1; Structure Data zeroed
;Boot Descriptor
:Standard Identifier “BOOT2”

;logical sector
:Volume allocation unit. Group of volume sectors. Must be at least 258 logical sectors per volume (there must be a logical sector beyond number 256).
:;length, size
::Equal. Multiple of 512&nbsp;B; able to fit any sector.
:;number
::Consecutive, from 0
:
;Descriptor tag
:Sixteen-byte structure recorded at start of some descriptors. Factors common CRC and format version handling. Allows damage or corruption recovery: helps identifying structures and context.
:;Tag Identifier (byte position 0; 2 bytes)
::Specifies type of descriptor
::;0
:::Descriptor format not specified
::;1–9, 256–266
:::Specified by ECMA-167
::;65&#x202F;280–65&#x202F;535
:::Implementation specified
::;Other values
:::Reserved for future standards
::
:;Descriptor Version (position 2; 2 bytes)
::
::;2
:::ECMA-167/2
::;3
:::ECMA-167/3
::
:;Reserved (position 5; 1 byte)
::Zero value
:;Tag Serial Number (position 6; 2 bytes)
::Identifier for a set of descriptors, or zero. Could be used to identify current descriptors from old descriptors when reusing the space without clearing it.
:;Descriptor CRC length (position 10; 2 bytes)
::Number of bytes used for CRC. If zero, the CRC is also zero.
:;Descriptor CRC (position 8; 2 bytes)
::CRC of data starting directly after the descriptor tag. [[WP:CRC-16|CRC-16]] using ITU-T [[WP:V.41|V.41]] standard polynomial. Example: 0x70 0x6A 0x77 → 0x3299.
:;Tag Location (position 12; 4 bytes)
::Logical sector number of start of descriptor. Consistency check.
:;Tag Checksum (position 4; 1 byte)
::Sum of all other tag bytes (0–3, 5–15)
:
;Anchor Volume Descriptor Pointer
:Specifies “an” extent of the Main and Reserve Volume Descriptors
:;Descriptor Tag (byte position 0; 16 bytes)
::Tag&nbsp;= 2
:;.&nbsp;.&nbsp;.
:
;Anchor point
:May be at logical sectors 256, ''n'' − 256, ''n'' − 1, and multiples of ⌊''n''/59⌋, except for logical sector 0, where ''n'' is the last logical sector number, one less than the total number of logical sectors. Thus there would be at least 59 potential anchor points. The number 59 is chosen to be close to 64 and to avoid the likelihood a single error affecting all anchor points. Must be at least two anchor points where Anchor Volume Descriptor Pointers identify one Volume Descriptor Sequence extent.

;Volume Descriptor Sequence
:

== UDF ==

[[WP:Universal Disk Format]]
